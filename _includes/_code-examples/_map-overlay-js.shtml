<pre class="language-js">
<code>/* Marker tooltip */
function popup(feature, layer) {
    var popupContent = '<p>Latitude: ' + feature.geometry.coordinates[1] + ' </p><p>Longitude: ' + feature.geometry.coordinates[0] + '</p>';

    if (feature.properties && feature.properties.popupContent) {
        popupContent += feature.properties.popupContent;
    }

    layer.bindPopup(popupContent);
}

/* Add polygon examples with no fill and opacity */
L.geoJson(commonFeatures, {
    style: function(feature) {
        return feature.properties;
    }
}).addTo(map);

/* Add polygon example with fill */
L.geoJson(polygonFill, {
    style: function(feature) {
        return feature.properties;
    }
}).addTo(map);

/* Add example thin line */
L.geoJson(thinLine, {
    style: L.mapbox.simplestyle.style
}).addTo(map);

/* Add example thick line */
L.geoJson(thickLine, {
    style: L.mapbox.simplestyle.style
}).addTo(map);

/* Add example default marker */
L.geoJson(defaultMarker, {
    style: function(feature) {
        return feature.properties;
    },
    onEachFeature: popup

}).addTo(map);

/* Add example custom marker */
L.geoJson(customMarker, {
    pointToLayer: function(feature, latlng) {
        return L.marker(latlng, {
            icon: customIcon
        });
    },
    style: function(feature) {
        return feature.properties;
    },
    onEachFeature: popup

}).addTo(map);

/* Add example cirlce pointer */
L.geoJson(circlePointer, {
    style: function(feature) {
        return feature.properties && feature.properties.style;
    },
    onEachFeature: popup,
    pointToLayer: function(feature, latlng) {
        return L.circleMarker(latlng, {
            radius: 8,
            fillColor: "#00ff00",
            color: "#00ff00",
            weight: 1,
            opacity: 1,
            fillOpacity: 0.8
        });
    }
}).addTo(map);</code>
</pre>
